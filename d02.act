#!/usr/bin/env runacton
import file


def bloopity_bloop(d: str, x):
    bloops = []
    for line in d.splitlines():
        #print(line)
        bloop = x(line)
        bloops.append(bloop)
    return bloops


def gen_report(d: str):
    r = d.split(" ")
    return list(map(int, r))


def is_safe(report):
    prev_delta = report[1] - report[0]
    for i in range(1, len(report)):
        delta = report[i] - report[i-1]
        if abs(delta) > 3 or abs(delta) == 0:
            return False
        if delta * prev_delta / abs(delta * prev_delta) != 1:
            return False
        prev_delta = delta
    return True


def part1(data):
    count = 0
    for report in data:
        safe = is_safe(report)
        if safe:
            count += 1
    return count

def part2(data):
    count = 0
    for report in data:
        safe = is_safe(report)
        if safe:
            count += 1
        else:
            # remove one element and check again
            for i in range(len(report)):
                safe = is_safe(report[:i] + report[i+1:])
                if safe:
                    count += 1
                    break
    return count


actor main(env):
    # Get a reference to capability to read a file, by refining from WorldCap
    f_cap = file.ReadFileCap(file.FileCap(env.cap))
    f = file.ReadFile(f_cap, 'input/d02.txt')
    input = f.read()
    data = bloopity_bloop(input.decode(), gen_report)
    
    print(part1(data))
    print(part2(data))
    env.exit(0)
