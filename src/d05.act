import aoc
import file
import testing


class Page(object):
    number: str
    predecessors: set[str]

    def __init__(self, number, rules):
        self.number = number
        self.predecessors = rules.get_def(number, set())


class Book(object):
    pages: list[Page]
    fixes: list[str]

    def __init__(self):
        self.pages = []
        self.fixes = []

    def insert_page(self, page):
        """Insert a page into the book respecting the rules for page order.

        If the page to insert is not listed as a predecessor of any other page,
        it is appended to the end of the book. If it is a predecessor of an
        existing page, it is inserted before that page. We presume the rules are acyclic :)
        """
        for idx, p in enumerate(self.pages):
            if page.number in p.predecessors:
                # The page must be inserted before p
                self.pages.insert(idx, page)
                self.fixes.append("%s before %s" % (page.number, p.number))
                return
        self.pages.append(page)


def parse(data):
    # The data is a list of rules like "A|B" where A is a predecessor of B. In
    # other words, A must appear before B. Each rule appears on a new line.
    # After the rules, there is a blank line, followed by a list of books. Each
    # book is a list of pages separated by commas.
    rules = {}
    books = []
    in_book = False
    for line in data:
        if line == "":
            in_book = True
            continue
        if in_book:
            b = Book()
            for page in line.split(","):
                p = Page(page, rules)
                b.insert_page(p)
            if b.fixes:
                fixes = ", ".join(b.fixes)
                print("✗ Book %s is out of order (%s)" % (line, fixes))
            else:
                print("✓ Book %s is in order" % line)
            books.append(b)
        else:
            rule = line.split("|")
            # We invert the ruleset to instead store the predecessors of a page
            if rule[1] not in rules:
                rules[rule[1]] = set()
            rules[rule[1]].add(rule[0])

    return rules, books


def mid_count(books):
    count = 0
    for book in books:
        mid = len(book.pages) // 2
        count += int(book.pages[mid].number)
    return count


def part1(books):
    return mid_count(filter(lambda b: not b.fixes, books))


def part2(books):
    return mid_count(filter(lambda b: b.fixes, books))


sample_data = """47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
75|47
97|75
47|61
75|61
47|29
75|13
53|13

75,47,61,53,29
97,61,53,29,13
75,29,13
75,97,47,61,53
61,13,29
97,13,75,29,47"""

def _test_part1():
    rules, books = parse(sample_data.splitlines())
    testing.assertEqual(part1(books), 143)

def _test_part2():
    rules, books = parse(sample_data.splitlines())
    testing.assertEqual(part2(books), 123)

actor main(env):
    f_cap = file.ReadFileCap(file.FileCap(env.cap))
    data = aoc.read_file(f_cap, 'input/d05.txt').splitlines()
    rules, books = parse(data)
    
    print("Part 1: %i" % part1(books))
    print("Part 2: %i" % part2(books))
    env.exit(0)
